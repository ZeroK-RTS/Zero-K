//linear constant 163840

#define TA			// This is a TA script

#include "constants.h"

piece  base, beam1, beam2, beam3, beam4, beam5, beam6, gate_l, gate_r, nano;

static-var  Static_Var_1, unitviewer, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_ACTIVATE			2

lua_QueryNanoPiece() 
{
  return 0;
}

activatescr()
{
	if( TRUE )
	{
		turn gate_l to z-axis <0.000000> now;
		turn gate_l to z-axis <90.016484> speed <135.000000>;
		turn gate_r to z-axis <0.000000> now;
		turn gate_r to z-axis <-90.016484> speed <135.000000>;
		sleep 514;
	}
	if( TRUE )
	{
		move nano to y-axis [3.050000] speed [7.000000];
		sleep 519;
	}
	sleep 13;
}

deactivatescr()
{
	if( TRUE )
	{
		move nano to y-axis [3.050000] now;
		turn gate_l to z-axis <90.016484> now;
		turn gate_r to z-axis <-90.016484> now;
		move nano to y-axis [0.000000] speed [7.000000];
		sleep 518;
	}
	if( TRUE )
	{
		turn gate_l to z-axis <0.000000> speed <133.000000>;
		turn gate_r to z-axis <0.000000> speed <133.000000>;
		sleep 520;
	}
	sleep 23;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

Go()
{
	dont-cache beam1;
	dont-cache beam2;
	dont-cache beam3;
	dont-cache beam4;
	dont-cache beam5;
	dont-cache beam6;
	dont-cache gate_l;
	dont-cache gate_r;
	dont-cache nano;
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
	cache beam1;
	cache beam2;
	cache beam3;
	cache beam4;
	cache beam5;
	cache beam6;
	cache gate_l;
	cache gate_r;
	cache nano;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{

	dont-shade beam1;
	dont-shade beam2;
	dont-shade beam3;
	dont-shade beam4;
	dont-shade beam5;
	dont-shade beam6;
	dont-shade gate_l;
	dont-shade gate_r;
	dont-shade nano;
	unitviewer = FALSE;
	Static_Var_1 = 0;
	call-script InitState();
	start-script SmokeUnit();
}

QueryNanoPiece(piecenum)
{
	if( Static_Var_1 == 0 )
	{
		piecenum = beam1;
	}
	else if( Static_Var_1 == 1 )
	{
		piecenum = beam2;
	}
	else if( Static_Var_1 == 2 )
	{
		piecenum = beam3;
	}
	else if( Static_Var_1 == 3 )
	{
		piecenum = beam4;
	}
	else if( Static_Var_1 == 4 )
	{
		piecenum = beam5;
	}
	else if( Static_Var_1 == 5 )
	{
		piecenum = beam6;
	}
    if (Static_Var_1 == 5) 
    {
		Static_Var_1 = 0;
	}
	else
	{
		++Static_Var_1;
	}
	call-script lua_QueryNanoPiece(piecenum);
}

Demo()
{
	unitviewer = TRUE;
}

Activate()
{
	signal SIG_ACTIVATE;
	start-script RequestState(0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	if( !unitviewer )
	{
		sleep 5000;
	}
	set-signal-mask 0;
	start-script RequestState(1);
}

StartBuilding()
{
	sleep 150;
}

StopBuilding()
{
	sleep 150;
}

QueryBuildInfo(piecenum)
{
	piecenum = base;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{

	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode beam1 type BITMAPONLY | BITMAP2;
		explode beam2 type BITMAPONLY | BITMAP3;
		explode beam3 type BITMAPONLY | BITMAP2;
		explode beam4 type BITMAPONLY | BITMAP3;
		explode beam5 type BITMAPONLY | BITMAP2;
		explode beam6 type BITMAPONLY | BITMAP3;
		explode gate_l type BITMAPONLY | BITMAP4;
		explode gate_r type BITMAPONLY | BITMAP5;
		explode nano type BITMAPONLY | BITMAP1;
		return 1;
	}
	if( severity <= 50 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode beam1 type FALL | BITMAP2;
		explode beam2 type FALL | BITMAP3;
		explode beam3 type FALL | BITMAP2;
		explode beam4 type FALL | BITMAP3;
		explode beam5 type FALL | BITMAP2;
		explode beam6 type FALL | BITMAP3;
		explode gate_l type BITMAPONLY | BITMAP4;
		explode gate_r type BITMAPONLY | BITMAP5;
		explode nano type SHATTER | BITMAP1;
		return 1;
	}
	if( severity <= 99 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode beam1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode beam2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode beam3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode beam4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode beam5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode beam6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode gate_l type BITMAPONLY | BITMAP4;
		explode gate_r type BITMAPONLY | BITMAP5;
		explode nano type SHATTER | BITMAP1;
		return 2;
	}
	corpsetype = 2;
	explode base type BITMAPONLY | BITMAP1;
	explode beam1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode beam2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode beam3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode beam4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode beam5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode beam6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode gate_l type BITMAPONLY | BITMAP4;
	explode gate_r type BITMAPONLY | BITMAP5;
	explode nano type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	return 2;
}
