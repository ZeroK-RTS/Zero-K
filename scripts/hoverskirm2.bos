#include "constants.h"

piece	base, body, jetl, jetr, jetb, turret,
		fire1, fire2, fire3, wake;

static-var  Static_Var_1, gun1, wobble, random;

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM				4

#define RESTORE_DELAY		3000


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

WobbleUnit()
{
	while( TRUE )
	{
		if( wobble == TRUE )
		{
			move base to y-axis [0.800000] speed [1.20000];
		}
		if( wobble == FALSE )
		{
			move base to y-axis [-0.800000] speed [1.20000];
		}
		wobble = !wobble;
		sleep 750;
	}
}

RockUnit(anglex, anglez)
{
	turn base to x-axis anglex speed <50.000000>;
	turn base to z-axis anglez speed <50.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <20.000000>;
	turn base to x-axis <0.000000> speed <20.000000>;
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn base to z-axis Func_Var_2 speed <105.000000>;
	turn base to x-axis Func_Var_1 speed <105.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.000000>;
	turn base to x-axis <0.000000> speed <30.000000>;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		if( Static_Var_1 <= 2 )
		{
			emit-sfx 5 from wake;
		}
		if( Static_Var_1 > 2)
		{
			emit-sfx 1024+0 from wake;
		}
		sleep 50;
	}
}

setSFXoccupy(Func_Var_1)
{
	Static_Var_1 = Func_Var_1;
}

Create()
{
	gun1 = 1;
	wobble=TRUE;
	start-script SmokeUnit();
	start-script WobbleUnit();
}


AimWeapon1(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <300.000000>;
	turn turret to x-axis <0.000000> - pitch speed <300.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn turret around x-axis;
	return (1);
}

QueryWeapon1(piecenum)
{
	if (gun1 > 3)
	{
		gun1 = 1;
	}
	if ( gun1 == 1 )
	{
		piecenum = fire1;
	}
	else if ( gun1 == 2 )
	{
		piecenum = fire2;
	}
	else
	{
		piecenum = fire3;
	}
}

AimFromWeapon1(piecenum)
{
	piecenum = turret;
}

Shot1()
{
	if ( gun1 == 1 )
	{
		emit-sfx 1024+2 from fire1;
	}
	else if ( gun1 == 2 )
	{
		emit-sfx 1024+2 from fire2;
	}
	else
	{
		emit-sfx 1024+2 from fire3;
	}
	++gun1;
}


Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type BITMAPONLY | BITMAP1;
		explode jetl type BITMAPONLY | BITMAP2;
		explode jetr type BITMAPONLY | BITMAP3;
		explode jetb type BITMAPONLY | BITMAP4;
		return 1;
	}
	if( severity <= 50 )
	{
		corpsetype = 1;
		explode body type BITMAPONLY | BITMAP2;
		explode jetr type BITMAPONLY | BITMAP4;
		explode jetl type BITMAPONLY | BITMAP1;
		explode jetb type BITMAPONLY | BITMAP3;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		return 1;
	}
	if( severity <= 99 )
	{
		corpsetype = 2;
		explode body type BITMAPONLY | BITMAP2;
		explode jetr type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode jetl type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode jetb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		return 2;
	}
	corpsetype = 2;
	explode body type BITMAPONLY | BITMAP2;
	explode jetr type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode jetl type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode jetb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	return 2;
}
