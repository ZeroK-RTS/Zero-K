piece body,head,tail,lwing,rwing,rblade,lblade;

static-var bMoving;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_MOVE			8

#include "constants.h"

#include "StateChg.h"


fly()
{
	while (bMoving)
		{
			turn lwing to z-axis <-40> speed<120>;
			turn rwing to z-axis <40> speed<120>;
			wait-for-turn lwing around z-axis;
			turn lwing to z-axis <40> speed<240>;
			turn rwing to z-axis <-40> speed<240>;
			wait-for-turn lwing around z-axis;
		}
}

stopfly ()
{	
	turn lwing		to z-axis <0> 		speed <200>;
	turn rwing		to z-axis <0> 		speed <200>;
}


Go()
{
	call-script fly();
}

Stop()
{
	call-script stopfly();
}


#define ACTIVATECMD	    call-script Go();
#define DEACTIVATECMD   call-script Stop();
#include "StateChg.h"




StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	bMoving = TRUE;
	start-script fly();
}

StopMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	bMoving = FALSE;
	start-script stopfly();
}

Create()
{
	call-script InitState();
	emit-sfx 1024+2 from body;
}

Activate()
{
	start-script RequestState(ACTIVE);
}

Deactivate()
{
	start-script RequestState(INACTIVE);
}


SweetSpot(piecenum)
	{	piecenum=body;	}	
	
RestoreAfterDelay()
	{
	sleep 1000;
	}

	AimPrimary(heading,pitch)
	{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn head to x-axis 0 -pitch speed <200>;
	wait-for-turn head around y-axis;
	start-script RestoreAfterDelay();
	
	return(TRUE);
	}
	
AimWeapon1()
	{
	return (1);
	}

AimFromWeapon1(piecenum)
	{
	piecenum = head;
	}

QueryWeapon1(piecenum)
	{
	piecenum = head;
	}
	
AimWeapon2()
	{
	return (1);
	}

AimFromWeapon2(piecenum)
	{
	piecenum = head;
	}

QueryWeapon2(piecenum)
	{
	piecenum = head;
	}
Shot1()
	{
	turn lblade to y-axis <20> speed [1];
	turn rblade to y-axis <-20> speed [1];
	wait-for-turn lblade around y-axis;
	turn lblade to y-axis <0> speed [0.3];
	turn rblade to y-axis <0> speed [0.3];
	}
	
BlockShot1(unit, block)
{
	if (get CRASHING)
	{
		block = 1;
	}
}

BlockShot2(unit, block)
{
	if (get CRASHING)
	{
		block = 1;
	}
}
	
HitByWeaponId()
	{
	emit-sfx 1024 from body;
	return 100;
	}

Killed( severity, corpsetype )
	{
	corpsetype = 1;
	emit-sfx 1025 from body;
	return( 0 );
	}