-- format:
-- {
--   cloakraid = "local x = piece('x'); function script.AimWeapon(x) Turn ... blabla; end",
--   cloakskirm = "local y = piece('y'); function script.Create(x) ...",
--   ...
-- }


local modOptions = Spring.GetModOptions()
local scriptHeader = VFS.LoadFile("gamedata/unit_script_header.lua", VFS.ZIP):gsub("%-%-[^\r\n]*", ""):gsub("[\r\n]", " ")
local append = false
local name = "tweakscripts"
while modOptions[name] and modOptions[name] ~= "" do
	local tweaks = Spring.Utilities.CustomKeyToUsefulTable(modOptions[name])
	Spring.Echo("Loading tweakscripts modoption", append or 0, "in unitDefID", unitDefID, "name", UnitDefs[unitDefID].name)
	if type(tweaks) ~= "table" then
		Spring.Echo("wasn't a table")
		-- return
	end

	if tweaks[UnitDefs[unitDefID].name] then
		local chunk, cerr = loadstring(scriptHeader .. tweaks[UnitDefs[unitDefID].name])
		if chunk then
			Spring.Echo("found mine, running")
			local ok, perr = pcall(chunk)
			if not ok then
				Spring.Echo("tweak compiled but errored", perr)
				-- return
			end
		else
			Spring.Echo("tweak didnt compile")
			-- return
		end
	else
		Spring.Echo("didnt find mine in this batch")
	end
	append = (append or 0) + 1
	name = "tweakscripts" .. append
end

Spring.Echo("finished tweakscript")


-- tweakscripts=ewogICBzaGllbGRyYWlkID0gW1tmdW5jdGlvbiBzY3JpcHQuQ3JlYXRlKCkgU3ByaW5nLkVjaG8oJ3lvIGltIGFuIEFLJykgZW5kXV0sCn0;
-- tweakscripts1=ewogICBjbG9ha3JhaWQgPSAnZnVuY3Rpb24gc2NyaXB0LkNyZWF0ZSgpIFNwcmluZy5FY2hvKCJ5byBpbSBhIHBlZXdlZSIpIGVuZCcsCiAgIGNsb2Frc2tpcm0gPSBbWwppbmNsdWRlICJjb25zdGFudHMubHVhIgoKbG9jYWwgaGlwcyA9IHBpZWNlICdoaXBzJwpsb2NhbCBjaGVzdCA9IHBpZWNlICdjaGVzdCcKbG9jYWwgZ3VuID0gcGllY2UgJ2d1bicKbG9jYWwgbXV6emxlID0gcGllY2UgJ211enpsZScKbG9jYWwgZXhoYXVzdCA9IHBpZWNlICdleGhhdXN0Jwpsb2NhbCB0dXJuZXIgPSBwaWVjZSAndHVybmVyJwpsb2NhbCBhaW1wb2ludCA9IHBpZWNlICdhaW1wb2ludCcKbG9jYWwgZ3VuZW1pdCA9IHBpZWNlICdndW5lbWl0JwoKbG9jYWwgdGhpZ2ggPSB7cGllY2UgJ2x0aGlnaCcsIHBpZWNlICdydGhpZ2gnfQpsb2NhbCBzaGluID0ge3BpZWNlICdsc2hpbicsIHBpZWNlICdyc2hpbid9CmxvY2FsIGZvb3QgPSB7cGllY2UgJ2xmb290JywgcGllY2UgJ3Jmb290J30KbG9jYWwga25lZSA9IHtwaWVjZSAnbGtuZWUnLCBwaWVjZSAncmtuZWUnfQpsb2NhbCBoZWVsID0ge3BpZWNlICdsaGVlbCcsIHBpZWNlICdyaGVlbCd9Cgpsb2NhbCBzbW9rZVBpZWNlID0ge2NoZXN0LCBleGhhdXN0LCBtdXp6bGV9CmxvY2FsIFJFTE9BRF9QRU5BTFRZID0gdG9udW1iZXIoVW5pdERlZnNbdW5pdERlZklEXS5jdXN0b21QYXJhbXMucmVsb2FkX21vdmVfcGVuYWx0eSkKCmxvY2FsIFNJR19BaW0gPSAxCmxvY2FsIFNJR19XYWxrID0gMgoKLS0gZnV0dXJlLXByb29mIHJ1bm5pbmcgYW5pbWF0aW9uIGFnYWluc3QgYmFsYW5jZSB0d2Vha3MKbG9jYWwgcnVuc3BlZWQgPSAyNSAqIChVbml0RGVmc1t1bml0RGVmSURdLnNwZWVkIC8gNjkpCgpsb2NhbCBhaW1CbG9ja2VkID0gZmFsc2UKCmxvY2FsIGZ1bmN0aW9uIEdldFNwZWVkTW9kKCkKCS0tIGRpc2FsbG93IHplcm8gKGluc3RhbnQgdHVybiBpbnN0ZWFkIC0-IGluZmluaXRlIGxvb3ApCglyZXR1cm4gbWF0aC5tYXgoMC4wNSwgR0cuYXR0X01vdmVDaGFuZ2VbdW5pdElEXSBvciAxKQplbmQKCmxvY2FsIGZ1bmN0aW9uIFNldFNlbGZTcGVlZE1vZChzcGVlZG1vZCkKCWlmIFJFTE9BRF9QRU5BTFRZID09IDEgdGhlbgoJCXJldHVybgoJZW5kCglTcHJpbmcuU2V0VW5pdFJ1bGVzUGFyYW0odW5pdElELCAic2VsZk1vdmVTcGVlZENoYW5nZSIsIHNwZWVkbW9kKQoJR0cuVXBkYXRlVW5pdEF0dHJpYnV0ZXModW5pdElEKQplbmQKCmxvY2FsIGZ1bmN0aW9uIFdhbGsoKQoJU2lnbmFsKFNJR19XYWxrKQoJU2V0U2lnbmFsTWFzayhTSUdfV2FsaykKCglmb3IgaSA9IDEsIDIgZG8KCQlUdXJuICh0aGlnaFtpXSwgeV9heGlzLCAwLCBydW5zcGVlZCowLjE1KQoJCVR1cm4gKHRoaWdoW2ldLCB6X2F4aXMsIDAsIHJ1bnNwZWVkKjAuMTUpCgllbmQKCglsb2NhbCBzaWRlID0gMQoJd2hpbGUgdHJ1ZSBkbwoJCWxvY2FsIHNwZWVkbW9kID0gR2V0U3BlZWRNb2QoKQoJCWxvY2FsIHRydWVzcGVlZCA9IHJ1bnNwZWVkICogc3BlZWRtb2QKCQlsb2NhbCB0dXJuTXVsdCA9IDEKCQlpZiB0cnVlc3BlZWQgPiAyNSB0aGVuCgkJCXR1cm5NdWx0ID0gMSArICh0cnVlc3BlZWQgLSAyNSkgKiAwLjEKCQllbmQKCgkJVHVybiAoc2hpbltzaWRlXSwgeF9heGlzLCBtYXRoLnJhZCg4NSkqdHVybk11bHQsIHRydWVzcGVlZCowLjI4KQoJCVR1cm4gKGhlZWxbc2lkZV0sIHhfYXhpcywgMCwgdHJ1ZXNwZWVkKjAuMjUpCgkJVHVybiAoZm9vdFtzaWRlXSwgeF9heGlzLCAwLCB0cnVlc3BlZWQqMC4yNSkKCQlUdXJuICh0aGlnaFtzaWRlXSwgeF9heGlzLCBtYXRoLnJhZCgtMzYpKnR1cm5NdWx0LCB0cnVlc3BlZWQqMC4xNikKCQlUdXJuICh0aGlnaFszLXNpZGVdLCB4X2F4aXMsIG1hdGgucmFkKDM2KSp0dXJuTXVsdCwgdHJ1ZXNwZWVkKjAuMTYpCgoJCU1vdmUgKGhpcHMsIHlfYXhpcywgMCwgdHJ1ZXNwZWVkKjAuOCAvIHR1cm5NdWx0KQoJCVdhaXRGb3JNb3ZlIChoaXBzLCB5X2F4aXMpCgoJCVR1cm4gKHNoaW5bc2lkZV0sIHhfYXhpcywgbWF0aC5yYWQoMTApKnR1cm5NdWx0LCB0cnVlc3BlZWQqMC4zMikKCQlUdXJuIChoZWVsW3NpZGVdLCB4X2F4aXMsIG1hdGgucmFkKDIwKSp0dXJuTXVsdCwgdHJ1ZXNwZWVkKjAuMzUpCgkJVHVybiAoZm9vdFtzaWRlXSwgeF9heGlzLCBtYXRoLnJhZCgtMjApKnR1cm5NdWx0LCB0cnVlc3BlZWQqMC4yNSkKCQlNb3ZlIChoaXBzLCB5X2F4aXMsIC0xLCB0cnVlc3BlZWQqMC4zNSkKCQlXYWl0Rm9yTW92ZSAoaGlwcywgeV9heGlzKQoKCQlNb3ZlIChoaXBzLCB5X2F4aXMsIC0yLCB0cnVlc3BlZWQqMC44IC8gdHVybk11bHQpCgoJCVdhaXRGb3JUdXJuICh0aGlnaFtzaWRlXSwgeF9heGlzKQoKCQlzaWRlID0gMyAtIHNpZGUKCWVuZAplbmQKCmxvY2FsIGZ1bmN0aW9uIFN0b3BXYWxrKCkKCVNpZ25hbChTSUdfV2FsaykKCglNb3ZlIChoaXBzLCB5X2F4aXMsIDAsIHJ1bnNwZWVkKjAuNSkKCglmb3IgaSA9IDEsIDIgZG8KCQlUdXJuICh0aGlnaFtpXSwgeF9heGlzLCAwLCBydW5zcGVlZCowLjIpCgkJVHVybiAoc2hpbltpXSwgIHhfYXhpcywgMCwgcnVuc3BlZWQqMC4yKQoJCVR1cm4gKGhlZWxbaV0sIHhfYXhpcywgMCwgcnVuc3BlZWQqMC4yKQoJCVR1cm4gKGZvb3RbaV0sIHhfYXhpcywgMCwgcnVuc3BlZWQqMC4yKQoKCQlUdXJuICh0aGlnaFtpXSwgeV9heGlzLCBtYXRoLnJhZCg2MCkgLSBpKm1hdGgucmFkKDQwKSwgcnVuc3BlZWQqMC4xKQoJCVR1cm4gKHRoaWdoW2ldLCB6X2F4aXMsIG1hdGgucmFkKDYpKmkgLSBtYXRoLnJhZCg5KSwgcnVuc3BlZWQqMC4xKQoJZW5kCmVuZAoKZnVuY3Rpb24gc2NyaXB0LlN0YXJ0TW92aW5nKCkKCVN0YXJ0VGhyZWFkKFdhbGspCmVuZAoKZnVuY3Rpb24gc2NyaXB0LlN0b3BNb3ZpbmcoKQoJU3RhcnRUaHJlYWQoU3RvcFdhbGspCmVuZAoKZnVuY3Rpb24gc2NyaXB0LkNyZWF0ZSgpCglTdGFydFRocmVhZChHRy5TY3JpcHQuU21va2VVbml0LCB1bml0SUQsIHNtb2tlUGllY2UpCglUdXJuIChjaGVzdCwgeV9heGlzLCBtYXRoLnJhZCgtMjApKQoJVHVybiAoZ3VuLCB4X2F4aXMsIG1hdGgucmFkKDIwKSwgbWF0aC5yYWQoNDApKQplbmQKCmxvY2FsIGZ1bmN0aW9uIFJlc3RvcmVBZnRlckRlbGF5KCkKCVNldFNpZ25hbE1hc2soU0lHX0FpbSkKCVNsZWVwICgyMDAwKQoJVHVybiAodHVybmVyLCB5X2F4aXMsIDAsIG1hdGgucmFkKDQwKSkKCVR1cm4gKGd1biwgeF9heGlzLCBtYXRoLnJhZCgyMCksIG1hdGgucmFkKDQwKSkKZW5kCgpsb2NhbCBmdW5jdGlvbiBSZWxvYWRQZW5hbHR5QW5kQW5pbWF0aW9uKCkKCWFpbUJsb2NrZWQgPSB0cnVlCglTZXRTZWxmU3BlZWRNb2QoUkVMT0FEX1BFTkFMVFkpCgoJU2xlZXAoMjAwKQoJVHVybiAodHVybmVyLCB5X2F4aXMsIDAsIG1hdGgucmFkKDIwMCkpCglUdXJuIChndW4sIHhfYXhpcywgMSwgbWF0aC5yYWQoMTIwKSkKCVNsZWVwKDEwMDApCglmb3IgaSA9IDIsIDQgZG8gLS0gMy41IHNlY29uZCByZWxvYWQgc28gbm8gcG9pbnQgY2hlY2tpbmcgZWFybGllci4KCQlUdXJuIChndW4sIHhfYXhpcywgMC44ICsgKGklMykqMC4yLCBtYXRoLnJhZCg2MCkpCgkJU2xlZXAoNjAwKQoJZW5kCglsb2NhbCBjaGVja1JhdGUgPSA1MDAKCXdoaWxlIHRydWUgZG8KCQlsb2NhbCBzdGF0ZSA9IFNwcmluZy5HZXRVbml0V2VhcG9uU3RhdGUodW5pdElELCAxLCAicmVsb2FkU3RhdGUiKQoJCWxvY2FsIGdhbWVGcmFtZSA9IFNwcmluZy5HZXRHYW1lRnJhbWUoKQoJCWlmIHN0YXRlIC0gMzAgPCBnYW1lRnJhbWUgdGhlbgoJCQljaGVja1JhdGUgPSA2NgoJCWVuZAoJCWlmIHN0YXRlIC0gMTMgPCBnYW1lRnJhbWUgdGhlbgoJCQlhaW1CbG9ja2VkID0gZmFsc2UKCQkJVHVybiAoZ3VuLCB4X2F4aXMsIDAsIG1hdGgucmFkKDEwMCkpCgkJCVNsZWVwKDMwMCkKCQkJaWYgYWltQmxvY2tlZCB0aGVuCgkJCQlyZXR1cm4KCQkJZW5kCgkJCVNldFNlbGZTcGVlZE1vZChSRUxPQURfUEVOQUxUWSowLjUgKyAwLjUpCgkJCVNsZWVwKDIwMCkKCQkJaWYgYWltQmxvY2tlZCB0aGVuCgkJCQlyZXR1cm4KCQkJZW5kCgkJCVNldFNlbGZTcGVlZE1vZCgxKQoJCQlSZXN0b3JlQWZ0ZXJEZWxheSgpCgkJCXJldHVybgoJCWVuZAoJCVNsZWVwKGNoZWNrUmF0ZSkKCWVuZAplbmQKCmZ1bmN0aW9uIE9uTG9hZEdhbWUoKQoJU2V0U2VsZlNwZWVkTW9kKDEpCmVuZAoKZnVuY3Rpb24gc2NyaXB0LkFpbUZyb21XZWFwb24obnVtKQoJcmV0dXJuIGd1bmVtaXQKZW5kCgpmdW5jdGlvbiBzY3JpcHQuUXVlcnlXZWFwb24obnVtKQoJcmV0dXJuIGd1bmVtaXQKZW5kCgpmdW5jdGlvbiBzY3JpcHQuQWltV2VhcG9uKG51bSwgaGVhZGluZywgcGl0Y2gpCglTaWduYWwoU0lHX0FpbSkKCVNldFNpZ25hbE1hc2soU0lHX0FpbSkKCglpZiBhaW1CbG9ja2VkIHRoZW4KCQlyZXR1cm4gZmFsc2UKCWVuZAoKCVR1cm4gKGhpcHMsIHhfYXhpcywgMCkKCVR1cm4gKGNoZXN0LCB4X2F4aXMsIDApCglUdXJuIChndW4sIHhfYXhpcywgLXBpdGNoLCBtYXRoLnJhZCgxMzApKQoJVHVybiAodHVybmVyLCB5X2F4aXMsIGhlYWRpbmcgKyBtYXRoLnJhZCg1KSwgbWF0aC5yYWQoMjIwKSkKCglXYWl0Rm9yVHVybiAodHVybmVyLCB5X2F4aXMpCglXYWl0Rm9yVHVybiAoZ3VuLCB4X2F4aXMpCgoJU3RhcnRUaHJlYWQoUmVzdG9yZUFmdGVyRGVsYXkpCgoJcmV0dXJuIHRydWUKZW5kCgpmdW5jdGlvbiBzY3JpcHQuRmlyZVdlYXBvbihudW0pCglFbWl0U2Z4IChleGhhdXN0LCAxMDI0KQoJU3RhcnRUaHJlYWQoUmVsb2FkUGVuYWx0eUFuZEFuaW1hdGlvbikKZW5kCgpmdW5jdGlvbiBzY3JpcHQuQmxvY2tTaG90KG51bSwgdGFyZ2V0SUQpCglpZiBTcHJpbmcuVmFsaWRVbml0SUQodGFyZ2V0SUQpIHRoZW4KCQlsb2NhbCBkaXN0TXVsdCA9IChTcHJpbmcuR2V0VW5pdFNlcGFyYXRpb24odW5pdElELCB0YXJnZXRJRCkgb3IgMCkvNDUwCgkJcmV0dXJuIEdHLk92ZXJraWxsUHJldmVudGlvbl9DaGVja0Jsb2NrKHVuaXRJRCwgdGFyZ2V0SUQsIDE4MC4xLCA3NSAqIGRpc3RNdWx0LCBmYWxzZSwgZmFsc2UsIHRydWUpCgllbmQKCXJldHVybiBmYWxzZQplbmQKCmxvY2FsIGV4cGxvZGFibGVzID0ge2hpcHMsIHRoaWdoWzJdLCBmb290WzFdLCBzaGluWzJdLCBrbmVlWzFdLCBoZWVsWzJdfQpmdW5jdGlvbiBzY3JpcHQuS2lsbGVkKHJlY2VudERhbWFnZSwgbWF4SGVhbHRoKQoJbG9jYWwgc2V2ZXJpdHkgPSByZWNlbnREYW1hZ2UgLyBtYXhIZWFsdGgKCglmb3IgaSA9IDEsICNleHBsb2RhYmxlcyBkbwoJCWlmIG1hdGgucmFuZG9tKCkgPCBzZXZlcml0eSB0aGVuCgkJCUV4cGxvZGUgKGV4cGxvZGFibGVzW2ldLCBTRlguRkFMTCArIFNGWC5TTU9LRSArIFNGWC5GSVJFKQoJCWVuZAoJZW5kCgoJaWYgKHNldmVyaXR5IDwgMC41KSB0aGVuCgkJcmV0dXJuIDEKCWVsc2UKCQlFeHBsb2RlIChjaGVzdCwgU0ZYLlNIQVRURVIpCgkJRXhwbG9kZSAoZ3VuLCBTRlguU0hBVFRFUikKCQlyZXR1cm4gMgoJZW5kCmVuZApdXSwKfQ;