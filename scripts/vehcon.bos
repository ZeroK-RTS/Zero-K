//
// [] = 65536, <> = 182.044449
//

// Comment this out to disable the wobbling turret
#define WOBBLE

#define TAK
#include "constants.h"

piece		base, body, lift, turret, cradle, rear, nano, panel_t, panel_r, panel_l, panel_b, cab,
			firepoint, door1, door2, rwheel1, rwheel2, rwheel3, rwheel4, lwheel1, lwheel2, lwheel3, lwheel4, fwheel,
			rbrace1, rbrace2, lbrace1, lbrace2, rguard1, rguard2, lguard1, lguard2;

static-var	moving, once;

// Signal definitions
#define SIG_BUILD						1
#define SIG_MOVE						2		//Signal to prevent duplicate moving. Ref for sig number: http://pastebin.com/raw.php?i=qEPRtcD9

#define RESTORE_DELAY					3000

#define TURN_SPEED1						<160>
#define TURN_SPEED2						<240>
#define MOVE_SPEED1						[10]
#define MOVE_SPEED2						[20]
#define SLEEP_TIME1						100
#define SLEEP_TIME2						250

#define WHEEL_TURN_SPEED1				<480>
#define WHEEL_TURN_SPEED1_ACCELERATION	<75>
#define WHEEL_TURN_SPEED1_DECELERATION	<200>

#define DOOR_ANGLE_Z					<160>
#define PANEL_ANGLE_MIN					<60>
#define PANEL_ANGLE_MAX					<90>
#define TURRET_Y						[1.5]
#define LIFT_Y							[4.5]
#define REAR_Z							[-1.2]
#define NANO_Z							[2]

lua_QueryNanoPiece()
{
  return 0;
}

DamageControl()
{
	var health;
	while (TRUE)
	{
		health = get HEALTH;

		// Restore damaged parts
/*		if (health > 25)
		{
			if (health > 50)
			{

			}

		}*/

		// Damage parts, smoke emits etc.
		if (health < 50)
		{
			emit-sfx SFXTYPE_WHITESMOKE from body;
			if (health < 25)
			{
				emit-sfx SFXTYPE_BLACKSMOKE from turret;
			}
		}
		sleep 1000;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;

	moving = TRUE;

	spin fwheel around x-axis speed WHEEL_TURN_SPEED1 accelerate WHEEL_TURN_SPEED1_ACCELERATION;
	spin rwheel1 around x-axis speed WHEEL_TURN_SPEED1 accelerate WHEEL_TURN_SPEED1_ACCELERATION;
	spin rwheel2 around x-axis speed WHEEL_TURN_SPEED1 accelerate WHEEL_TURN_SPEED1_ACCELERATION;
	spin rwheel3 around x-axis speed WHEEL_TURN_SPEED1 accelerate WHEEL_TURN_SPEED1_ACCELERATION;
	spin rwheel4 around x-axis speed WHEEL_TURN_SPEED1 accelerate WHEEL_TURN_SPEED1_ACCELERATION;
	spin lwheel1 around x-axis speed WHEEL_TURN_SPEED1 accelerate WHEEL_TURN_SPEED1_ACCELERATION;
	spin lwheel2 around x-axis speed WHEEL_TURN_SPEED1 accelerate WHEEL_TURN_SPEED1_ACCELERATION;
	spin lwheel3 around x-axis speed WHEEL_TURN_SPEED1 accelerate WHEEL_TURN_SPEED1_ACCELERATION;
	spin lwheel4 around x-axis speed WHEEL_TURN_SPEED1 accelerate WHEEL_TURN_SPEED1_ACCELERATION;
}

StopMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;

	moving = FALSE;

	// I don't like insta braking. It's not perfect but works for most cases.
	// Probably looks goofy when the unit is turtling around, i.e. does not become faster as time increases..

	stop-spin fwheel around x-axis decelerate WHEEL_TURN_SPEED1_DECELERATION;
	stop-spin rwheel1 around x-axis decelerate WHEEL_TURN_SPEED1_DECELERATION;
	stop-spin rwheel2 around x-axis decelerate WHEEL_TURN_SPEED1_DECELERATION;
	stop-spin rwheel3 around x-axis decelerate WHEEL_TURN_SPEED1_DECELERATION;
	stop-spin rwheel4 around x-axis decelerate WHEEL_TURN_SPEED1_DECELERATION;
	stop-spin lwheel1 around x-axis decelerate WHEEL_TURN_SPEED1_DECELERATION;
	stop-spin lwheel2 around x-axis decelerate WHEEL_TURN_SPEED1_DECELERATION;
	stop-spin lwheel3 around x-axis decelerate WHEEL_TURN_SPEED1_DECELERATION;
	stop-spin lwheel4 around x-axis decelerate WHEEL_TURN_SPEED1_DECELERATION;
}

StartBuilding(heading, pitch)
{
	signal SIG_BUILD;
	set-signal-mask SIG_BUILD;

	turn door1 to z-axis 0-DOOR_ANGLE_Z speed TURN_SPEED2;
	turn door2 to z-axis DOOR_ANGLE_Z speed TURN_SPEED2;
	sleep SLEEP_TIME2;

	move lift to y-axis LIFT_Y speed MOVE_SPEED2;
	move turret to y-axis TURRET_Y speed MOVE_SPEED2;
	wait-for-move lift along y-axis;

	move nano to z-axis NANO_Z speed MOVE_SPEED2;
	move rear to z-axis REAR_Z speed MOVE_SPEED2;
	turn panel_t to x-axis 0-PANEL_ANGLE_MIN speed TURN_SPEED2;
	turn panel_b to x-axis PANEL_ANGLE_MIN speed TURN_SPEED2;
	turn panel_l to y-axis PANEL_ANGLE_MIN speed TURN_SPEED2;
	turn panel_r to y-axis 0-PANEL_ANGLE_MIN speed TURN_SPEED2;
	turn turret to y-axis heading speed TURN_SPEED2;
	turn cradle to x-axis 0-pitch speed TURN_SPEED2;
	wait-for-turn turret around y-axis;
	wait-for-turn cradle around x-axis;

	set INBUILDSTANCE to 1;

	var rand_turret_y, rand_panel_angle;
#ifdef WOBBLE
	while (TRUE) {
		if (rand(1,100) > 66) {
			rand_turret_y = rand(0,2)*[1];
			rand_panel_angle = rand(0, 1);
			if (rand_panel_angle) rand_panel_angle = PANEL_ANGLE_MAX;
			else rand_panel_angle = PANEL_ANGLE_MIN;

			move turret to y-axis (TURRET_Y - rand_turret_y) speed MOVE_SPEED2;

			turn panel_t to x-axis 0-rand_panel_angle speed TURN_SPEED1;
			turn panel_b to x-axis rand_panel_angle speed TURN_SPEED1;
			turn panel_l to y-axis rand_panel_angle speed TURN_SPEED1;
			turn panel_r to y-axis 0-rand_panel_angle speed TURN_SPEED1;
		}
		sleep 250;
	}
#endif
}

StopBuilding()
{
	signal SIG_BUILD;
	set-signal-mask SIG_BUILD;
	sleep RESTORE_DELAY;
	set-signal-mask 0;
	set INBUILDSTANCE to 0;

	move nano to z-axis 0 speed MOVE_SPEED1;
	move rear to z-axis 0 speed MOVE_SPEED1;
	turn panel_t to x-axis 0 speed TURN_SPEED1;
	turn panel_b to x-axis 0 speed TURN_SPEED1;
	turn panel_l to y-axis 0 speed TURN_SPEED1;
	turn panel_r to y-axis 0 speed TURN_SPEED1;
	turn turret to y-axis 0 speed TURN_SPEED1;
	turn cradle to x-axis 0 speed TURN_SPEED1;
	wait-for-turn turret around y-axis;
	wait-for-turn cradle around x-axis;

	move lift to y-axis 0 speed MOVE_SPEED1;
	move turret to y-axis 0 speed MOVE_SPEED1;
	sleep SLEEP_TIME2;

	turn door1 to z-axis 0 speed TURN_SPEED1;
	turn door2 to z-axis 0 speed TURN_SPEED1;
}

QueryNanoPiece(piecenum)
{
	piecenum = firepoint;
	call-script lua_QueryNanoPiece(piecenum);
}

Killed(severity, corpsetype)
{
	if(severity <= 25)
	{
		corpsetype = 1;
		explode nano type BITMAPONLY | BITMAP;
		explode cradle type BITMAPONLY | BITMAP;
		explode body type BITMAPONLY | BITMAP;
		explode turret type BITMAPONLY | BITMAP;
		return 1;
	}
	if(severity <= 50)
	{
		corpsetype = 1;
		explode nano type FALL | BITMAP;
		explode cradle type FALL | BITMAP;
		explode body type BITMAPONLY | BITMAP;
		explode turret type SHATTER | BITMAP;
		return 1;
	}
	if(severity < 100)
	{
		corpsetype = 2;
		explode nano type SHATTER | BITMAP;
		explode rear type SHATTER | BITMAP;
		explode cradle type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP;
		explode panel_t type FALL | BITMAP;
		explode panel_b type FALL | BITMAP;
		explode panel_l type FALL | BITMAP;
		explode panel_r type FALL | BITMAP;
		explode body type BITMAPONLY | BITMAP;
		explode turret type SHATTER | BITMAP;
		return 2;
	}
	corpsetype = 2;
	explode nano type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP;
	explode rear type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP;
	explode cradle type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP;
	explode panel_t type FALL | BITMAP;
	explode panel_b type FALL | BITMAP;
	explode panel_l type FALL | BITMAP;
	explode panel_r type FALL | BITMAP;
	explode body type SHATTER | BITMAP;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP;
	return 2;
}
Create()
{
	moving = FALSE;

	while (get BUILD_PERCENT_LEFT)
		sleep 250;

	start-script DamageControl();
}