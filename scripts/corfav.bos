#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, turret, gun, barrel, bwheel, fwheel, firepoint;

static-var  restore_delay;

// Signal definitions
#define SIG_MOVE				4

#define WHEEL_SPIN_SPEED		<180>
#define WHEEL_SPIN_ACCEL		<15>
#define WHEEL_SPIN_DECEL		<45>

#define SIG_AIM				2
#define ANIM_PERIOD				50
#define PIVOT_MOD				40 //appox. equal to MAX_PIVOT / turnrate
#define MAX_PIVOT				<50>
#define MIN_PIVOT				<-50>
#define PIVOT_SPEED				<80>

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

AnimControl() {
	var lastHeading, currHeading, diffHeading, pivotAngle;
	lastHeading = GET HEADING;
	while (1) {
		//pivot
		currHeading = GET HEADING;
		diffHeading = currHeading - lastHeading;
		if (diffHeading > 0x7fff) diffHeading = diffHeading - 0x10000;
		if (diffHeading < -0x8000) diffHeading = diffHeading + 0x10000;
		pivotAngle = diffHeading * PIVOT_MOD;
		if (pivotAngle > MAX_PIVOT) pivotAngle = MAX_PIVOT;
		if (pivotAngle < MIN_PIVOT) pivotAngle = MIN_PIVOT;
		turn body to z-axis pivotAngle speed PIVOT_SPEED;
		
		lastHeading = currHeading;
		sleep ANIM_PERIOD;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	start-script AnimControl();
	spin fwheel around x-axis speed WHEEL_SPIN_SPEED accelerate WHEEL_SPIN_ACCEL;

	spin bwheel around x-axis speed WHEEL_SPIN_SPEED accelerate WHEEL_SPIN_ACCEL;
}

StopMoving() {
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	stop-spin fwheel around x-axis decelerate WHEEL_SPIN_DECEL;

	stop-spin bwheel around x-axis decelerate WHEEL_SPIN_DECEL;
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn base to z-axis Func_Var_2 speed <105.000000>;
	turn base to x-axis Func_Var_1 speed <105.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.000000>;
	turn base to x-axis <0.000000> speed <30.000000>;
}

Create()
{
	restore_delay = 3000;
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret to y-axis <0.000000> speed <90.000000>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <200.000000>;
	wait-for-turn turret around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
}


AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	piecenum = barrel;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode barrel type BITMAPONLY | BITMAP2;
		explode fwheel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode bwheel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode turret type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode fwheel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode bwheel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	if( severity < 100 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode bwheel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode fwheel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode turret type SHATTER | BITMAP3;
		return (0);
	}
	corpsetype = 2;
	explode base type BITMAPONLY | BITMAP1;
	explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode bwheel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode fwheel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP3;
}
