//linear constant 65536

#include "constants.h"

piece		base, body, turret1, sleeve1, barrel1, firepoint1, turret2, sleeve2, gun2, firepoint2,
			tracks1, tracks2, tracks3, wheels1, wheels2, wheels3, wheels4, wheels5, wheels6;

static-var	moving, once, animCount, gun_1_yaw;

// Signal definitions
#define SIG_AIM1				1
#define SIG_AIM2				2
#define SIG_AIM3				16
#define SIG_ROCK_X				4		//Signal to prevent multiple rocking. REPLACE!
#define SIG_TILT_Z				8		//Signal to prevent multiple rocking. REPLACE!
#define SIG_MOVE				32		//Signal to prevent duplicate moving. Ref for sig number: http://pastebin.com/raw.php?i=qEPRtcD9
#define ANIM_SPEED				50
#define RESTORE_DELAY			3000
#define LARGE_MUZZLE_FLASH_FX	1024
#define HUGE_MUZZLE_FLASH_FX	1025

//rocking
#define ROCK_PIECE				base	//piece to rock. REPLACE!
#define ROCK_X_SPEED			2		//Number of half-cycles per second around x-axis.
#define ROCK_X_DECAY			-1/3	//Rocking around x-axis is reduced by this factor each time; should be negative to alternate rocking direction.
#define ROCK_X_MIN              <0.1>	//If around x-axis rock is not greater than this amount, rocking will stop after returning to center.

#define ROCK_X_FIRE_1			-24

//tiltz
#define TILT_PIECE				base	//piece to tilt. REPLACE!
#define TILT_Z_ANGLE			<-5>	//How much to tilt at maximum
#define TILT_Z_DIST				[10]	//Typically half the width of the unit. Keeps the unit's edges from sinking into the ground.
#define TILT_Z_SPEED			4		//Number of half-cycles per second around z-axis

#include "rockx.h"
#include "tiltz.h"

RestoreAfterDelay(delay)
{
	sleep delay;
	turn turret1 to y-axis <0> speed <45>;
	turn sleeve1 to x-axis <0> speed <15>;
	turn turret2 to y-axis <0> speed <120>;
	turn sleeve2 to x-axis <0> speed <90>;
	
}

DamageControl()
{
	var health;
	while (TRUE)
	{
		health = get HEALTH;
		
		// Restore damaged parts
/*		if (health > 25)
		{
			if (health > 50)
			{
				
			}

		}*/
		
		// Damage parts, mnoke emits etc.
		if (health < 50)
		{
			emit-sfx SFXTYPE_WHITESMOKE from body;
			if (health < 25)
			{	
				emit-sfx SFXTYPE_BLACKSMOKE from turret1;
			}
		}
		sleep 1000;
	}
}
AnimationControl()
{
	var current_track;
	current_track = 0;
	
	while (TRUE)
	{
		if (moving OR once)
		{
			if (current_track == 0)
			{
				show tracks1;
				hide tracks3;
				++current_track;
			}
			else if (current_track == 1)
				{
				show tracks2;
				hide tracks1;
				++current_track;
			}
			else if (current_track == 2)
			{
				show tracks3;
				hide tracks2;
				current_track=0;
				once = FALSE;
			}
			++animCount;
		}
		sleep ANIM_SPEED;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	
	moving = TRUE;
	animCount = 0;

	spin wheels1 around x-axis speed <360> accelerate <60>;
	spin wheels6 around x-axis speed <360> accelerate <60>;

	spin wheels2 around x-axis speed <480> accelerate <120>;
	spin wheels3 around x-axis speed <480> accelerate <120>;
	spin wheels4 around x-axis speed <480> accelerate <120>;
	spin wheels5 around x-axis speed <480> accelerate <120>;
}

StopMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	
	moving = FALSE;
	
	// I don't like insta braking. It's not perfect but works for most cases.
	// Probably looks goofy when the unit is turtling around, i.e. does not get faster as time increases..
	once = animCount*ANIM_SPEED/1000;
	if (once > 3) once = 3;

	stop-spin wheels1 around x-axis decelerate <15>;
	stop-spin wheels6 around x-axis decelerate <15>;

	stop-spin wheels2 around x-axis decelerate <45>;
	stop-spin wheels3 around x-axis decelerate <45>;
	stop-spin wheels4 around x-axis decelerate <45>;
	stop-spin wheels5 around x-axis decelerate <45>;

}


// Weapons
AimFromWeapon1(piecenum)
{
	piecenum = turret1;
}

QueryWeapon1(piecenum)
{
	piecenum = firepoint1;
}

AimWeapon1 (heading, pitch)
{
	signal SIG_AIM1;
	set-signal-mask SIG_AIM1;
	
	turn turret1 to y-axis (heading) speed <90>;
	turn sleeve1 to x-axis (0 - pitch) speed <45>;
	wait-for-turn turret1 around y-axis;
	wait-for-turn sleeve1 around x-axis;
	start-script RestoreAfterDelay(RESTORE_DELAY);
	gun_1_yaw = heading;
	return TRUE;
}

Shot1(placeholder)
{
	start-script RockX(ROCK_X_FIRE_1, gun_1_yaw);
	start-script TiltZ(gun_1_yaw);
	emit-sfx LARGE_MUZZLE_FLASH_FX from firepoint1;
	move barrel1 to z-axis [-5] now;
	sleep 125;
	move barrel1 to z-axis 0 speed [10];
}

AimFromWeapon2(piecenum)
{
	piecenum = turret2;
}

QueryWeapon2(piecenum)
{
	piecenum = firepoint2;
}

AimWeapon2 (heading, pitch)
{
	signal SIG_AIM2;
	set-signal-mask SIG_AIM2;

	turn turret2 to y-axis heading speed <360>;
	turn sleeve2 to x-axis 0-pitch speed <180>;
	wait-for-turn turret2 around y-axis;
	wait-for-turn sleeve2 around x-axis;

	start-script RestoreAfterDelay(RESTORE_DELAY);

	return (TRUE);
}


Shot2()
{
	return (TRUE);
}

AimFromWeapon3(piecenum)
{
	piecenum = turret1;
}

QueryWeapon3(piecenum)
{
	piecenum = firepoint1;
}

AimWeapon3 (heading, pitch)
{
	signal SIG_AIM3;
	set-signal-mask SIG_AIM3;
	
	turn turret1 to y-axis (heading) speed <90>;
	turn sleeve1 to x-axis (0 - pitch) speed <45>;
	wait-for-turn turret1 around y-axis;
	wait-for-turn sleeve1 around x-axis;
	start-script RestoreAfterDelay(RESTORE_DELAY);
	gun_1_yaw = heading;
	return TRUE;
}

Shot3(placeholder)
{
	start-script RockX(ROCK_X_FIRE_1, gun_1_yaw);
	start-script TiltZ(gun_1_yaw);
	emit-sfx HUGE_MUZZLE_FLASH_FX from firepoint1;
	move barrel1 to z-axis [-5] now;
	sleep 125;
	move barrel1 to z-axis 0 speed [10];
}

Killed(severity, corpsetype)
{
	if(severity >= 0 AND severity < 25)
	{
		corpsetype = 1;
		explode barrel1 type BITMAPONLY | BITMAP;
		explode sleeve1 type BITMAPONLY | BITMAP;
		explode gun2 type BITMAPONLY | BITMAP;
		explode turret1 type BITMAPONLY | BITMAP;
		explode turret2 type BITMAPONLY | BITMAP;
		explode body type BITMAPONLY | BITMAP;
		return 1;
	}
	else if(severity >= 25 AND severity < 50)
	{
		corpsetype = 1;
		explode barrel1 type FALL | BITMAP;
		explode gun2 type SHATTER | BITMAP;
		explode sleeve1 type FALL | BITMAP;
		explode turret1 type SHATTER | BITMAP;
		explode turret2 type FALL | BITMAP;
		explode body type BITMAPONLY | BITMAP;
		return 1;
	}
	else if(severity >= 50 AND severity < 100)
	{
		corpsetype = 2;
		explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP;
		explode gun2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP;
		explode sleeve1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP;
		explode turret1 type SHATTER | BITMAP;
		explode turret2 type SHATTER | BITMAP;
		explode body type BITMAPONLY | BITMAP;
		return 2;
	}
	// D-Gunned/Self-D
	else if(severity >= 100)
	{
		corpsetype = 2;
		explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP;
		explode gun2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP;
		explode sleeve1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP;
		explode turret1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP;
		explode turret2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP;
		explode body type SHATTER | BITMAP;
		return 2;
	}
}
Create()
{
	moving = FALSE;

	hide tracks1;
	hide tracks2;

	// no sidearm at the moment gameplay-wise
	hide turret2;
	hide sleeve2;
	hide gun2;

	while (get BUILD_PERCENT_LEFT)
		sleep 250;

	start-script AnimationControl();
	start-script DamageControl();
	call-script RockXInit();
}